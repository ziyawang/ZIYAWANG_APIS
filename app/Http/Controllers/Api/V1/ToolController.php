<?php/** * 通用控制器 */namespace App\Http\Controllers\Api\V1;use Illuminate\Http\Request;use App\Http\Requests;use App\Http\Controllers\Controller;use Dingo\Api\Routing\Helpers;use JWTAuth;use App\User;use App\Project;use App\Service;use App\News;use App\Video;use Cache;use Tymon\users\Exceptions\JWTException;use DB;use PDO;class ToolController extends BaseController{     /**     * 获取系统消息列表     *     * @return mixed     */    public function getMessage()    {        $payload = app('request')->all();        $startpage = isset($payload['startpage']) ?  $payload['startpage'] : 1;        $pagecount = isset($payload['pagecount']) ?  $payload['pagecount'] : 5;        $skipnum = ($startpage-1)*$pagecount;        $UserID = $this->auth->user()->toArray()['userid'];        $sysmsgs = DB::table('T_M_MESSAGE')->where('RecID', 0)->lists('TextID');        foreach ($sysmsgs as $v) {            $tmp = DB::table('T_M_MESSAGE')->where(['TextID'=>$v, 'RecID'=>$UserID])->count();            if($tmp == 0){                DB::table('T_M_MESSAGE')->insert(['TextID'=>$v, 'RecID'=>$UserID, 'SendID'=>0, 'Status'=>0]);            }        }        $counts = DB::table('T_M_MESSAGE')->where('RecID', $UserID)->where('Status','<>', 2)->count();        $pages = ceil($counts/$pagecount);                if($counts == 0){            return $this->response->array(['status_code'=>'200','counts'=>'0', 'pages'=>$pages]);        }        $readcounts = DB::table('T_M_MESSAGE')->where(['RecID'=>$UserID,'Status'=>0])->count();        $messages = DB::table('T_M_MESSAGE')->where('RecID', $UserID)->where('Status','<>', 2)->orderBy('TextID','desc')->skip($skipnum)->take($pagecount)->lists('TextID');        // dd($messages);        $data = [];        foreach ($messages as $id) {            $status = DB::table('T_M_MESSAGE')->where(['RecID'=>$UserID, 'TextID'=>$id])->pluck('Status');            $message = $this->getMessageInfo($id);            $message->Status = $status;            $data[] = $message;        }        return $this->response->array(['status_code'=>'200','counts'=>$counts,'data'=>$data, 'pages'=>$pages, 'readcounts'=>$readcounts, 'currentpage'=>$startpage]);    }     /**     * 获取系统消息内容     *     * @return mixed     */    public function getMessageInfo($id)    {        $message = DB::table('T_M_MESSAGETEXT')->where('TextID', $id)->select('TextID','Title','Text','Time')->first();        return $message;    }     /**     * 更改消息状态为已读     *     * @return mixed     */    public function readMessage()    {        $TextID = app('request')->get('TextID');        $UserID = $this->auth->user()->toArray()['userid'];        $TextID = is_array($TextID)? $TextID : array($TextID);        DB::table('T_M_MESSAGE')->where(['RecID'=>$UserID])->whereIn('TextID',$TextID)->update(['Status'=>1]);        $readcounts = DB::table('T_M_MESSAGE')->where(['RecID'=>$UserID,'Status'=>0])->count();        return $this->response->array(['status_code'=>'200','msg'=>'信息已读', 'readcounts'=>$readcounts,]);    }    /**     * 更改消息状态为删除     *     * @return mixed     */    public function delMessage()    {        $TextID = app('request')->get('TextID');        $UserID = $this->auth->user()->toArray()['userid'];        $TextID = is_array($TextID)? $TextID : array($TextID);        DB::table('T_M_MESSAGE')->where(['RecID'=>$UserID])->whereIn('TextID',$TextID)->update(['Status'=>2]);        return $this->response->array(['status_code'=>'200','msg'=>'信息已删除']);    }    /**     * 收藏     *     * @return mixed     */    public function collect()    {           $payload = app('request')->all();        $type = $payload['type'];        $itemID = $payload['itemID'];        $UserID = $this->auth->user()->toArray()['userid'];        $tmp = DB::table('T_P_COLLECTION')->where(['Type' => $type, 'ItemID' => $itemID, 'UserID' => $UserID])->first();        if($tmp){            DB::table('T_P_COLLECTION')->where(['Type' => $type, 'ItemID' => $itemID, 'UserID' => $UserID])->delete();            switch ($type) {                //默认1：项目，2：视频，3：新闻资讯，4：服务方                case '1':                    $table = 'T_P_PROJECTINFO';                    $pk = 'ProjectID';                    break;                                case '2':                    $table = 'T_V_VIDEOINFO';                    $pk = 'VideoID';                    break;                case '3':                    $table = 'T_N_NEWSINFO';                    $pk = 'NewsID';                    break;                case '4':                    $table = 'T_U_SERVICEINFO';                    $pk = 'ServiceID';                    break;            }            $item = DB::table("$table")->where($pk,$itemID)->decrement('CollectionCount');                        return $this->response->array(['status_code' => 200, 'msg' => '取消收藏成功！']);        }        $res = DB::table('T_P_COLLECTION')->insert([                'Type'=>$type,                'CollectTime' => date('Y-m-d H:i:s',time()),                'ItemID' => $itemID,                'UserID' => $UserID            ]);        if($res) {            switch ($type) {                //默认1：项目，2：视频，3：新闻资讯，4：服务方                case '1':                    $table = 'T_P_PROJECTINFO';                    $pk = 'ProjectID';                    break;                                case '2':                    $table = 'T_V_VIDEOINFO';                    $pk = 'VideoID';                    break;                case '3':                    $table = 'T_N_NEWSINFO';                    $pk = 'NewsID';                    break;                case '4':                    $table = 'T_U_SERVICEINFO';                    $pk = 'ServiceID';                    break;            }            $item = DB::table("$table")->where($pk,$itemID)->increment('CollectionCount');            return $this->response->array(['status_code' => 200, 'msg' => '收藏成功！']);        } else {            return $this->response->array(['status_code' => 200, 'msg' => '取消收藏成功！']);        }    }    /**     * 收藏列表     *     * @return mixed     */    public function collectList()    {           $payload = app('request')->all();        $startpage = isset($payload['startpage']) ?  $payload['startpage'] : 1;        $pagecount = isset($payload['pagecount']) ?  $payload['pagecount'] : 5;        $skipnum = ($startpage-1)*$pagecount;        $UserID = $this->auth->user()->toArray()['userid'];        // $collections = DB::table('T_P_COLLECTION')->where('UserID',$UserID)->get();        $collections = DB::table('T_P_COLLECTION')->select('ItemID','Type')->where('UserID',$UserID)->get();        $counts = count($collections);        $pages = ceil($counts/$pagecount);        $collections = DB::table('T_P_COLLECTION')->select('ItemID','Type','CollectTime')->where('UserID',$UserID)->orderBy('CollectTime','desc')->skip($skipnum)->take($pagecount)->get();        $data = [];        foreach ($collections as $items) {            $id = $items->ItemID;            $item = [];            switch ($items->Type) {                case '1':                    $Project = new \App\Http\Controllers\Api\V2\ProjectController();                    $item = $Project->getInfo($id);                    $item['ProArea'] = isset($item['ProArea']) ? $item['ProArea'] : '';                    $item['FromWhere'] = isset($item['FromWhere']) ? $item['FromWhere'] : '';                    $item['AssetType'] = isset($item['AssetType']) ? $item['AssetType'] : '';                    $item['TotalMoney'] = isset($item['TotalMoney']) ? $item['TotalMoney'] : '';                    $item['TransferMoney'] = isset($item['TransferMoney']) ? $item['TransferMoney'] : '';                    $item['Status'] = isset($item['Status']) ? $item['Status'] : '';                    $item['Rate'] = isset($item['Rate']) ? $item['Rate'] : '';                    $item['Requirement'] = isset($item['Requirement']) ? $item['Requirement'] : '';                    $item['BuyerNature'] = isset($item['BuyerNature']) ? $item['BuyerNature'] : '';                    $item['Informant'] = isset($item['Informant']) ? $item['Informant'] : '';                    $item['Buyer'] = isset($item['Buyer']) ? $item['Buyer'] : '';                    $item['ProjectNumber'] = 'FB' . sprintf("%05d", $item['ProjectID']);                    $item['PublishTime'] = substr($item['PublishTime'], 0,10);                    $item['ProType'] = $item['TypeID'];                    $item['TypeID'] = 1;                    break;                case '2':                    $item = Video::select('VideoTitle','ViewCount','VideoDes','VideoID','VideoLogo','VideoLink','VideoLink2')->where('VideoID', $id)->first()->toArray();                    $item['TypeID'] = 2;                    break;                case '3':                    $item = News::select('NewsTitle','Brief','NewsID','NewsLogo','NewsLabel','PublishTime')->where('NewsID', $id)->first()->toArray();                    $item['TypeID'] = 3;                    break;                case '4':                    $item = Service::select('ServiceName','ServiceID','ServiceType','ServiceArea','UserID','ServiceLocation')->where('ServiceID', $id)->first()->toArray();                    $type = explode(',', $item['ServiceType']);                    $type = DB::table('T_P_PROJECTTYPE')->whereIn('TypeID',$type)->lists('SerName');                    $picture = User::where('UserID',$item['UserID'])->pluck('UserPicture');                    $item['ServiceType'] = implode('、', $type);                    $item['UserPicture'] = $picture;                    $item['ServiceNumber'] = 'FW' . sprintf("%05d", $item['ServiceID']);                    $item['TypeID'] = 4;                    break;            }            $item['ItemID'] = $id;            $item['CollectTime'] = $items->CollectTime;            $data[] = $item;        }        return $this->response->array(['counts'=>$counts, 'pages'=>$pages, 'data'=>$data, 'currentpage'=>$startpage]);    }    /**     * 收藏列表 移动端专用     *     * @return mixed     */    public function appcollectList()    {           $payload = app('request')->all();        $startpage = isset($payload['startpage']) ?  $payload['startpage'] : 1;        $pagecount = isset($payload['pagecount']) ?  $payload['pagecount'] : 5;        $skipnum = ($startpage-1)*$pagecount;        $UserID = $this->auth->user()->toArray()['userid'];        // $collections = DB::table('T_P_COLLECTION')->where('UserID',$UserID)->get();        $collections = DB::table('T_P_COLLECTION')->select('ItemID','Type')->where('UserID',$UserID)->get();        $counts = count($collections);        $pages = ceil($counts/$pagecount);        $collections = DB::table('T_P_COLLECTION')->select('ItemID','Type','CollectTime')->where('UserID',$UserID)->orderBy('CollectTime','desc')->skip($skipnum)->take($pagecount)->get();        $data = [];        foreach ($collections as $items) {            $id = $items->ItemID;            $item = [];            switch ($items->Type) {                case '1':                    $item = Project::join('T_P_PROJECTTYPE', 'T_P_PROJECTINFO.TypeID', '=', 'T_P_PROJECTTYPE.TypeID')->select('TypeName', 'ProjectID','ProArea','WordDes','PictureDes1')->where('ProjectID', $id)->where('CertifyState', '<>', '3')->first();                    if(!$item){                        break;                    }                    $item = Project::join('T_P_PROJECTTYPE', 'T_P_PROJECTINFO.TypeID', '=', 'T_P_PROJECTTYPE.TypeID')->select('TypeName', 'ProjectID','ProArea','WordDes','PictureDes1')->where('ProjectID', $id)->where('CertifyState', '<>', '3')->first()->toArray();                    $item['ProjectNumber'] = 'FB' . sprintf("%05d", $item['ProjectID']);                    $item['TypeID'] = 1;                    break;                case '2':                    $item = Video::select('VideoTitle','ViewCount','VideoDes','VideoID','VideoLogo','VideoLink','VideoLink2')->where('VideoID', $id)->first()->toArray();                    $item['TypeID'] = 2;                    break;                case '3':                    $item = News::select('NewsTitle','Brief','NewsID','NewsLogo')->where('NewsID', $id)->first()->toArray();                    $item['TypeID'] = 3;                    break;                case '4':                    $item = Service::select('ServiceName','ServiceID','ServiceType','ServiceArea','UserID')->where('ServiceID', $id)->first()->toArray();                    $type = explode(',', $item['ServiceType']);                    $type = DB::table('T_P_PROJECTTYPE')->whereIn('TypeID',$type)->lists('SerName');                    $picture = User::where('UserID',$item['UserID'])->pluck('UserPicture');                    $item['ServiceType'] = implode('、', $type);                    $item['UserPicture'] = $picture;                    $item['TypeID'] = 4;                    break;            }            $item['ItemID'] = $id;            $item['CollectTime'] = substr($items->CollectTime, 0,10);            $data[] = $item;        }        return $this->response->array(['counts'=>$counts, 'pages'=>$pages, 'data'=>$data, 'currentpage'=>$startpage]);    }    /**    *全站搜索    *    *@return mixed    */    public function search()    {        $payload = app('request')->all();        $startpage = isset($payload['startpage']) ?  $payload['startpage'] : 1;        $pagecount = isset($payload['pagecount']) ?  $payload['pagecount'] : 10;        $type = $payload['type'];        $content = $payload['content'];        switch ($type) {                        case '1'://                $data = $this->searchPro($content, $startpage, $pagecount);                break;            case '2'://                $data = $this->searchVid($content, $startpage, $pagecount);                break;                        case '4'://                $data = $this->searchSer($content, $startpage, $pagecount);                break;        }        return $data;    }    public function searchPro($content, $startpage, $pagecount)    {        $Project = new \App\Http\Controllers\Api\V2\ProjectController();                $projects = Project::where('WordDes','like','%'.$content.'%')->whereIn('TypeID',[1,6,12,16,17,18,19,20,21,22])->where('CertifyState',1)->where('PublishState','<>','2')->where('Member', '<>', '2')->lists('ProjectID');        $counts = count($projects);        $pages  = ceil($counts/$pagecount);        $skipnum = ($startpage-1)*$pagecount;        $projects = Project::where('WordDes','like','%'.$content.'%')->whereIn('TypeID',[1,6,12,16,17,18,19,20,21,22])->where('CertifyState',1)->where('PublishState','<>','2')->where('Member', '<>', '2')->orderBy('created_at', 'desc')->skip($skipnum)->take($pagecount)->lists('ProjectID');        $data = [];        foreach ($projects as $id) {            $item = $Project->getInfo($id);            $item['ProArea'] = isset($item['ProArea']) ? $item['ProArea'] : '';            $item['Corpore'] = isset($item['Corpore']) ? $item['Corpore'] : '';            $item['FromWhere'] = isset($item['FromWhere']) ? $item['FromWhere'] : '';            $item['AssetType'] = isset($item['AssetType']) ? $item['AssetType'] : '';            $item['TotalMoney'] = isset($item['TotalMoney']) ? $item['TotalMoney'] : '';            $item['TransferMoney'] = isset($item['TransferMoney']) ? $item['TransferMoney'] : '';            $item['Status'] = isset($item['Status']) ? $item['Status'] : '';            $item['Rate'] = isset($item['Rate']) ? $item['Rate'] : '';            $item['Requirement'] = isset($item['Requirement']) ? $item['Requirement'] : '';            $item['BuyerNature'] = isset($item['BuyerNature']) ? $item['BuyerNature'] : '';            $item['Informant'] = isset($item['Informant']) ? $item['Informant'] : '';            $item['Buyer'] = isset($item['Buyer']) ? $item['Buyer'] : '';            $item['ProjectNumber'] = 'FB' . sprintf("%05d", $item['ProjectID']);            $item['PublishTime'] = substr($item['PublishTime'], 0,10);            $item['InvestType'] = isset($item['InvestType']) ? $item['InvestType'] : '';            $item['Year'] = isset($item['Year']) ? $item['Year'] : '';            $data[] = $item;        }         // dd($data);        return $this->response->array(['counts'=>$counts, 'pages'=>$pages, 'data'=>$data, 'currentpage'=>$startpage]);    }    public function searchSer($content, $startpage, $pagecount)    {        $Service = new \App\Http\Controllers\Api\V2\UserController();        $services = Service::where('ServiceIntroduction','like','%'.$content.'%')->orWhereRaw("CONCAT(`ServiceName`, `ServiceLocation`, 'ConnectPerson', 'ServiceArea') LIKE '%$content%'")->lists('ServiceID');        $services = DB::table('T_P_SERVICECERTIFY')->where('T_P_SERVICECERTIFY.State','1')->whereIn('ServiceID',$services)->orderBy('updated_at', 'desc')->lists('ServiceID');        $counts = count($services);        $pages  = ceil($counts/$pagecount);        $skipnum = ($startpage-1)*$pagecount;        // $services = Service::where('ServiceIntroduction','like','%'.$content.'%')->orWhereRaw("CONCAT(`ServiceName`, `ServiceLocation`, 'ConnectPerson', 'ServiceArea') LIKE '%$content%'")->orderBy('created_at', 'desc')->skip($skipnum)->take($pagecount)->lists('ServiceID');// dd($services);        $services = array_slice($services, $skipnum, $pagecount);        $data = [];        foreach ($services as $id) {            $item = $Service->getInfo($id);            if($item != 0) {                $item['ServiceNumber'] = 'FW' . sprintf("%05d", $item['ServiceID']);            }            $data[] = $item;        }        return ['counts'=>$counts, 'pages'=>$pages, 'data'=>$data, 'currentpage'=>$startpage];    }    public function searchVid($content, $startpage, $pagecount)    {        $Video = new VideoController();        $videos = Video::orWhereRaw("CONCAT(`VideoTitle`, `VideoDes`, 'VideoLabel') LIKE '%$content%'")->where('Flag', 1)->lists('VideoID');        $counts = count($videos);        $pages  = ceil($counts/$pagecount);        $skipnum = ($startpage-1)*$pagecount;        $videos = Video::orWhereRaw("CONCAT(`VideoTitle`, `VideoDes`, 'VideoLabel') LIKE '%$content%'")->where('Flag', 1)->orderBy('created_at', 'desc')->skip($skipnum)->take($pagecount)->lists('VideoID');        $data = [];        $User = $this->auth->user() ? $this->auth->user()->toArray() : null;        foreach ($videos as $id) {            $item = $Video->getInfo($id,$User);            $data[] = $item;        }        return ['counts'=>$counts, 'pages'=>$pages, 'data'=>$data, 'currentpage'=>$startpage];    }    public function uploadFile(){            //获取提交的数据             $payload = app('request')->all();          // $payload = app('request')->except('a');            $proType = $payload['TypeID'];            $Channel = isset($payload['Channel'])?$payload['Channel']:'ANDROID';            $diffTableName = DB::table('T_P_PROJECTTYPE')->where('TypeID',$proType)->pluck('TableName');            $diffData = app('request')->except('ProArea','WordDes','VoiceDes','PictureDes1','PictureDes2','PictureDes3','token','access_token','UserID','Channel');             // dd($diffData);            //整理上传的图片，音频             //$base_path = "./ziyaupload/users/"; //存放目录  //悬赏信息该单位为元if($proType == 9 || $proType == '09' || $diffTableName == 'T_P_SPEC09') {    $diffData['TotalMoney'] = $diffData['TotalMoney']/10000;}           $image_path=dirname(base_path()).'/ziyaupload/images/user/';             $voice_path=dirname(base_path()).'/ziyaupload/files/';                if(!is_dir($image_path)){                           mkdir($image_path,0777,true);                  }                  if(!is_dir($voice_path)){                      mkdir($voice_path,0777,true);                  }                foreach($_FILES as  $key=>$file){                    if(isset($_FILES[$key])){                                $baseName=basename($file['name']);                                $extension=strrchr($baseName, ".");                                $newName=time() . mt_rand(1000, 9999).$extension;                            if($key=="VoiceDes"){                                  $target_path = $voice_path . $newName;                                      $filePath="/".$newName;                            }else{                                $target_path = $image_path . $newName;                                  $filePath="/user/".$newName;                            }                                                               if(move_uploaded_file($_FILES[$key]["tmp_name"],$target_path)){                                           $payload[$key]=$filePath;                                 }else{                                   return $this->response->array(['status_code' => '480','msg'=>"文件上传失败"]);                                }                      }            }                  // /*$validator = app('validator')->make($payload, $rules);         // // 验证格式        // if ($validator->fails()) {        //     return $this->response->array(['error' => $validator->errors()]);        // }         // //事务处理,往项目信息表projectinfo和项目属性表spec01表插入数据        DB::beginTransaction();        try {            $project = new Project();             // $project->UserID = 1;            $project->UserID = $this->auth->user()->toArray()['userid'];            $project->TypeID = $payload['TypeID'];            $project->ProArea = $payload['ProArea'];            $project->WordDes = $payload['WordDes'];            $project->VoiceDes = isset($payload['VoiceDes']) ? $payload['VoiceDes'] : '';            $project->PictureDes1 = isset($payload['PictureDes1']) ? $payload['PictureDes1'] : '';            $project->PictureDes2 = isset($payload['PictureDes2']) ?  $payload['PictureDes2'] : '';            $project->PictureDes3 = isset($payload['PictureDes3']) ?  $payload['PictureDes3']  : '';            $project->PublishTime = date('Y-m-d H:i:s',time());            $project->Channel = $Channel;            $project->save();           // DB::table('T_P_PROJECTINFO')->create(['TypeID' => 1,'UserID' => 1, 'aaa' => '111']) db不能用create方法 公共的info表可以直接用create方法 spec要用排除没用的数据方法             $diffData['ProjectID'] = $project->ProjectID;            DB::table("$diffTableName")->insert($diffData);           DB::table("T_P_PROJECTCERTIFY")->insert(['State'=>0, 'created_at'=>date('Y-m-d H:i:s',time()), 'ProjectID'=>$project->ProjectID]);          DB::commit();        } catch (Exception $e){            DB::rollback();            throw $e;        }         // 创建项目成功     if (!isset($e)) {            return $this->response->array(['status_code'=>'200','success' => 'Create Pro Success']);        } else {            return $this->response->array(['status_code'=>'499','error' => 'Create Pro Error']);        }        }    public function upload(){        $image_path=dirname(base_path()).'/ziyaupload/images/user/';        if(!is_dir($image_path)){              mkdir($image_path,0777,true);          }         $baseName=basename($_FILES['UserPicture']['name'] );        $extension=strrchr($baseName, ".");        $newName=time() . mt_rand(1000, 9999).$extension;        $target_path = $image_path . $newName;          $filePath="/user/".$newName;        if(move_uploaded_file($_FILES['UserPicture']['tmp_name'], $target_path)){            $user=new User();            $userId=$this->auth->user()->toArray()["userid"];            $dbs= DB::table("users")->where("userid",$userId)->update([                        "UserPicture"=>$filePath,                ]);            if($dbs){                return $this->response->array(['status_code'=>'200','success' => 'update User Success']);            }else{                return $this->response->array(['status_code'=>'409','success' => 'update User Error']);            }        }    }    //安卓更新的接口    public function update(){        $datas=DB::table("T_APP_UPDATE")->get();        return $datas;    }    //ios更新的接口    public function iosupdate(){        $datas=DB::table("T_APP_IOSUPDATE")->get();        return $datas;    }    //用户评论接口    public function commentCreate(){        $payload = app('request')->all();        $comment = [];        $comment['VideoID'] = $payload['VideoID'];        $comment['Content'] = $payload['Content'];        $comment['PubTime'] = date('Y-m-d H:i:s',time());        $UserID = $this->auth->user() ? $this->auth->user()->toArray()['userid'] : null;        if($UserID){            $user = User::where('UserID', $UserID)->first();            $comment['UserName'] = substr_replace($user->phonenumber,'****',3,4);            $comment['UserPicture'] = $user->UserPicture;        } else {            $comment['UserName'] = '游客评论';            $comment['UserPicture'] = '/user/defaltoux.jpg';        }        $res = DB::table('T_U_COMMENT')->insert($comment);        if($res){            return $this->response->array(['status_code'=>'200', 'msg'=>'评论成功！']);        } else {            return $this->response->array(['status_code'=>'413', 'msg'=>'评论失败！']);        }    }    //获取评论列表    public function commentList(){        $payload = app('request')->all();        $startpage = isset($payload['startpage']) ?  $payload['startpage'] : 1;        $pagecount = isset($payload['pagecount']) ?  $payload['pagecount'] : 10;        $VideoID = $payload['VideoID'];        $comments = DB::table('T_U_COMMENT')->where(['VideoID'=>$VideoID, 'DeleteFlag'=>0])->lists('CommentID');        $counts = count($comments);        $pages = ceil($counts/$pagecount);        $skipnum = ($startpage-1)*$pagecount;        $comments = DB::table('T_U_COMMENT')->where(['VideoID'=>$VideoID, 'DeleteFlag'=>0])->orderBy('PubTime', 'desc')->skip($skipnum)->take($pagecount)->lists('CommentID');        $data = [];        foreach ($comments as $id) {            $item = $this->commentInfo($id);               $data[] = $item;        }        // dd($data);        return $this->response->array(['counts'=>$counts, 'pages'=>$pages, 'data'=>$data, 'currentpage'=>$startpage]);    }    //获取评论信息    public function commentInfo($id){        $comment = DB::table('T_U_COMMENT')->select('UserName','UserPicture','Content','PubTime')->where('CommentID',$id)->first();        return $comment;    }    //删除评论信息    public function commnetDelete(){        $payload = app('request')->all();        $CommentID = $payload['CommentID'];        $res = DB::table('T_U_COMMENT')->where('CommentID',$CommentID)->update(['DeleteFlag'=>1]);        if($res){            return $this->response->array(['status_code'=>'200', 'msg'=>'删除评论成功！']);        } else {            return $this->response->array(['status_code'=>'414', 'msg'=>'删除评论失败！']);        }    }    //视频点赞    public function zan(){        $payload = app('request')->all();        $UserID = $this->auth->user() ? $this->auth->user()->toArray()['userid'] : null;        $zan = [];        $zan['VideoID'] = $payload['VideoID'];        $zan['ZanTime'] = date('Y-m-d H:i:s',time());        if($UserID){            $zan['UserID'] = $UserID;            $tmp = DB::table('T_U_ZAN')->where(['VideoID'=>$payload['VideoID'], 'UserID'=>$UserID])->count();            if($tmp == 1){                return $this->response->array(['status_code'=>'200','msg'=>'您已经点过赞了！']);            }        } else {            $zan['Cookie'] = $payload['Cookie'];            $tmp = DB::table('T_U_ZAN')->where(['VideoID'=>$payload['VideoID'], 'Cookie'=>$payload['Cookie']])->count();            if($tmp == 1){                return $this->response->array(['status_code'=>'200','msg'=>'您已经点过赞了！']);            }        }        $res = DB::table('T_U_ZAN')->insert($zan);        if($res){            Video::where('VideoID',$payload['VideoID'])->increment('ZanCount');        }        return $this->response->array(['status_code'=>'200','msg'=>'点赞成功！']);    }    //App轮播图    public function banner(){        $datas=DB::table("T_P_BANNER")->orderBy("created_at","desc")->take(3)->get();        return $datas;    }    //10月20日（搜索搜不出收费信息）    public function searchs()    {        $payload = app('request')->all();        $startpage = isset($payload['startpage']) ?  $payload['startpage'] : 1;        $pagecount = isset($payload['pagecount']) ?  $payload['pagecount'] : 10;        $type = $payload['type'];        $content = $payload['content'];        switch ($type) {                        case '1'://                $data = $this->searchPros($content, $startpage, $pagecount);                break;            case '2'://                $data = $this->searchVid($content, $startpage, $pagecount);                break;                        case '4'://                $data = $this->searchSer($content, $startpage, $pagecount);                break;        }        return $data;    }    public function searchPros($content, $startpage, $pagecount)    {        $Project = new \App\Http\Controllers\Api\V2\ProjectController();                $projects = Project::where('WordDes','like','%'.$content.'%')->whereIn('TypeID',[1,6,12,16,17,18,19,20,21,22])->where('CertifyState',1)->where('PublishState','<>','2')->where('Member', '<>', '2')->lists('ProjectID');        $counts = count($projects);        $pages  = ceil($counts/$pagecount);        $skipnum = ($startpage-1)*$pagecount;        $projects = Project::where('WordDes','like','%'.$content.'%')->whereIn('TypeID',[1,6,12,16,17,18,19,20,21,22])->where('CertifyState',1)->where('PublishState','<>','2')->where('Member', '<>', '2')->orderBy('created_at', 'desc')->skip($skipnum)->take($pagecount)->lists('ProjectID');        $data = [];        foreach ($projects as $id) {            $item = $Project->getInfo($id);            $item['ProArea'] = isset($item['ProArea']) ? $item['ProArea'] : '';            $item['Corpore'] = isset($item['Corpore']) ? $item['Corpore'] : '';            $item['FromWhere'] = isset($item['FromWhere']) ? $item['FromWhere'] : '';            $item['AssetType'] = isset($item['AssetType']) ? $item['AssetType'] : '';            $item['TotalMoney'] = isset($item['TotalMoney']) ? $item['TotalMoney'] : '';            $item['TransferMoney'] = isset($item['TransferMoney']) ? $item['TransferMoney'] : '';            $item['Status'] = isset($item['Status']) ? $item['Status'] : '';            $item['Rate'] = isset($item['Rate']) ? $item['Rate'] : '';            $item['Requirement'] = isset($item['Requirement']) ? $item['Requirement'] : '';            $item['BuyerNature'] = isset($item['BuyerNature']) ? $item['BuyerNature'] : '';            $item['Informant'] = isset($item['Informant']) ? $item['Informant'] : '';            $item['Buyer'] = isset($item['Buyer']) ? $item['Buyer'] : '';            $item['ProjectNumber'] = 'FB' . sprintf("%05d", $item['ProjectID']);            $item['PublishTime'] = substr($item['PublishTime'], 0,10);            $item['InvestType'] = isset($item['InvestType']) ? $item['InvestType'] : '';            $item['Year'] = isset($item['Year']) ? $item['Year'] : '';            $data[] = $item;        }         // dd($data);        return $this->response->array(['counts'=>$counts, 'pages'=>$pages, 'data'=>$data, 'currentpage'=>$startpage]);    }}